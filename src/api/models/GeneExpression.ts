/* tslint:disable */
/* eslint-disable */
/**
 * Finder
 * A web app for finding PDCM gene expression data for end-users based on data-set.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A model to gene expression data.
 * @export
 * @interface GeneExpression
 */
export interface GeneExpression {
    /**
     * 
     * @type {string}
     * @memberof GeneExpression
     */
    modelId?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneExpression
     */
    geneSymbol?: string;
    /**
     * 
     * @type {number}
     * @memberof GeneExpression
     */
    zScore?: number;
    /**
     * 
     * @type {string}
     * @memberof GeneExpression
     */
    diagnosis?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneExpression
     */
    platformId?: string;
    /**
     * 
     * @type {string}
     * @memberof GeneExpression
     */
    chromosome?: string;
    /**
     * 
     * @type {number}
     * @memberof GeneExpression
     */
    seqStartPosition?: number;
    /**
     * 
     * @type {number}
     * @memberof GeneExpression
     */
    seqEndPosition?: number;
    /**
     * 
     * @type {string}
     * @memberof GeneExpression
     */
    geneIdEnsembl?: string;
}

/**
 * Check if a given object implements the GeneExpression interface.
 */
export function instanceOfGeneExpression(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GeneExpressionFromJSON(json: any): GeneExpression {
    return GeneExpressionFromJSONTyped(json, false);
}

export function GeneExpressionFromJSONTyped(json: any, ignoreDiscriminator: boolean): GeneExpression {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'modelId': !exists(json, 'model_id') ? undefined : json['model_id'],
        'geneSymbol': !exists(json, 'gene_symbol') ? undefined : json['gene_symbol'],
        'zScore': !exists(json, 'z_score') ? undefined : json['z_score'],
        'diagnosis': !exists(json, 'diagnosis') ? undefined : json['diagnosis'],
        'platformId': !exists(json, 'platform_id') ? undefined : json['platform_id'],
        'chromosome': !exists(json, 'chromosome') ? undefined : json['chromosome'],
        'seqStartPosition': !exists(json, 'seq_start_position') ? undefined : json['seq_start_position'],
        'seqEndPosition': !exists(json, 'seq_end_position') ? undefined : json['seq_end_position'],
        'geneIdEnsembl': !exists(json, 'gene_id_ensembl') ? undefined : json['gene_id_ensembl'],
    };
}

export function GeneExpressionToJSON(value?: GeneExpression | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'model_id': value.modelId,
        'gene_symbol': value.geneSymbol,
        'z_score': value.zScore,
        'diagnosis': value.diagnosis,
        'platform_id': value.platformId,
        'chromosome': value.chromosome,
        'seq_start_position': value.seqStartPosition,
        'seq_end_position': value.seqEndPosition,
        'gene_id_ensembl': value.geneIdEnsembl,
    };
}

